{"version":3,"sources":["componets/TOC.js","componets/Subject.js","componets/ReadContent.js","componets/CreateContent.js","componets/UpdateContent.js","componets/Control.js","App.js","serviceWorker.js","index.js"],"names":["TOC","lists","data","this","props","i","length","push","key","id","href","data-id","onClick","e","preventDefault","onChangePage","target","dataset","bind","title","Component","Subject","sub","ReadContent","desc","CreateContent","action","method","onSubmit","value","decs","type","name","placeholder","UpdateContent","state","inputFormHandler","setState","onChange","Control","onChangeMode","App","max_content_id","mode","selected_content_id","subject","welcome","contents","_title","_desc","_article","_content","getReadContent","_contents","Array","from","_id","className","Number","_mode","window","confirm","splice","alert","getContent","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3994e01c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass TOC extends Component {\n  render(){\n    var lists = [];\n    var data = this.props.data;\n    var i=0;\n    while(i < data.length){\n      lists.push(<li key={data[i].id}>\n        <a\n          href={\"/content/\"+data[i].id}\n          data-id={data[i].id}\n          onClick={function(e){\n            e.preventDefault();\n            this.props.onChangePage(e.target.dataset.id);\n          }.bind(this)}>{data[i].title}</a></li>);\n      i = i + 1;\n    }\n    return(\n      <nav>\n        <ul>\n          {lists}\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default TOC;\n","import React, {Component} from 'react';\n\nclass Subject extends Component {\n  render(){\n    return (\n      //무조건 하나의 최상위 테그만 사용해야 한다. 여기서는 Header 테그가 그에 해당.\n      //React애서는 jsx 언어를 사용하는데 자바스크립트와 html 테그를 동시에 사용하는데.\n      //컴포넌트 클래스의 이름은 다른 컴포넌트에서 html테그로 사용한다.\n      //this.props.____ 의 형식으로 {어느 위치에} {어떤 이름의} html 사용자 속성 값을 받을지 정해줄 수 있다.\n      <header>\n        <h1><a href=\"/\" onClick={function(e){\n          e.preventDefault();\n          this.props.onChangePage();\n        }.bind(this)}>{this.props.title}</a></h1>\n        {this.props.sub}\n      </header>\n    );\n  }\n}\n\nexport default Subject;\n","import React, {Component} from 'react';\n\n\nclass ReadContent extends Component {\n  render(){\n    return(\n      <article>\n        <h2>{this.props.title}</h2>\n        {this.props.desc}\n      </article>\n    );\n  }\n}\n\nexport default ReadContent;\n","import React, {Component} from 'react';\n\n\nclass CreateContent extends Component {\n  render(){\n    return(\n      <article>\n        <h2>Create</h2>\n        <form action=\"/create_process\" method=\"post\"\n        onSubmit={function(e){\n          e.preventDefault();\n          this.props.onSubmit(e.target.title.value, e.target.decs.value);\n        }.bind(this)}>\n          <p><input type=\"text\" name=\"title\" placeholder=\"title\"></input></p>\n          <p>\n            <textarea name=\"decs\" placeholder=\"description\"></textarea>\n          </p>\n          <p>\n            <input type=\"submit\"></input>\n          </p>\n        </form>\n      </article>\n    );\n  }\n}\n\nexport default CreateContent;\n","import React, {Component} from 'react';\n\n\nclass UpdateContent extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      id:this.props.data.id,\n      title:this.props.data.title,\n      desc:this.props.data.desc\n    }\n    this.inputFormHandler = this.inputFormHandler.bind(this);\n  }\n\n  inputFormHandler(e){\n    this.setState({[e.target.name]:e.target.value});\n  }\n\n  render(){\n    return(\n      <article>\n        <h2>Update</h2>\n        <form action=\"/create_process\" method=\"post\"\n        onSubmit={function(e){\n          e.preventDefault();\n          this.props.onSubmit(this.state.id, this.state.title, this.state.desc);\n        }.bind(this)}>\n          <input type=\"hidden\" name=\"id\" value={this.state.id}></input>\n          <p>\n            <input\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"title\"\n              value={this.state.title}\n              onChange={this.inputFormHandler}\n            ></input>\n          </p>\n          <p>\n            <textarea name=\"desc\" placeholder=\"description\" value={this.state.desc}\n            onChange={this.inputFormHandler}></textarea>\n          </p>\n          <p>\n            <input type=\"submit\"></input>\n          </p>\n        </form>\n      </article>\n    );\n  }\n}\n\nexport default UpdateContent;\n","import React, {Component} from 'react';\n\nclass Control extends Component {\n  render(){\n    return (\n      <ul id=\"control\">\n        <li><a href=\"/create\" onClick={function(e){\n          e.preventDefault();\n          this.props.onChangeMode('create');\n        }.bind(this)}>create</a></li>\n\n        <li><a href=\"/update\" onClick={function(e){\n          e.preventDefault();\n          this.props.onChangeMode('update');\n        }.bind(this)}>update</a></li>\n\n        <li><input onClick={function(e){\n          e.preventDefault();\n          this.props.onChangeMode('delete');\n        }.bind(this)} type=\"button\" value=\"delete\"></input></li>\n      </ul>\n    );\n  }\n}\n\nexport default Control;\n","import React, {Component} from 'react';\nimport './App.css';\nimport TOC from \"./componets/TOC\";\nimport Subject from \"./componets/Subject\";\nimport ReadContent from \"./componets/ReadContent\";\nimport CreateContent from \"./componets/CreateContent\";\nimport UpdateContent from \"./componets/UpdateContent\";\nimport Control from \"./componets/Control\";\nclass App extends Component {\n  constructor(props){\n    //컴포넌트가 실행될 때 컨스트럭트 함수가 있으면 렌더값의 프로퍼스 값을 초기화 해준다.\n    //클래스에 의해 생성될 객체의 모양을 결정해 주는 것.\n    //Super는 부모 클래스의 컨스트럭트 값을 받아올 때 사용\n    super(props);\n    //state의 초기을 설정\n    this.max_content_id = 3;\n    this.state = {\n      mode:'welcome',\n      selected_content_id:2,\n      subject:{title:'Fun Company', sub:'Fun Startup Embassy LLC'},\n      welcome:{title:'Welcome', desc:'This is Eric\\'s coding playground.'},\n      contents:[\n        {id:1, title:'HTML', desc:'HTML is HyperText ...'},\n        {id:2, title:'CSS', desc:'CSS is ... '},\n        {id:3, title:'JavaScript', desc:'JavaScript is ...'}\n      ]\n    }\n\n  }\n  getReadContent(){\n    var i = 0;\n    while(i < this.state.contents.length){\n      var data = this.state.contents[i];\n      if(data.id === this.state.selected_content_id) {\n        return data;\n      }\n      i = i+1;\n    }\n  };\n  getContent(){\n    var _title, _desc, _article = null;\n\n    if(this.state.mode === 'welcome'){\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n      _article = <ReadContent title={_title} desc={_desc}></ReadContent>;\n    }\n    else if(this.state.mode === 'read'){\n      var _content = this.getReadContent();\n      _article = <ReadContent title={_content.title} desc={_content.desc}></ReadContent>;\n    } else if(this.state.mode === 'create'){\n      _article = <CreateContent\n      onSubmit={function(_title, _desc){\n        this.max_content_id = this.max_content_id + 1;\n        // this.state.contents.push(\n        //   {id:max_content_id, title:_title, desc:_desc}\n        // );\n\n        // var _contents = this.state.contents.concat(\n        //   {id:this.max_content_id, title:_title, desc:_desc}\n        // );\n        var _contents = Array.from(this.state.contents);\n        _contents.push({id:this.max_content_id, title:_title, desc:_desc});\n\n        this.setState({\n          contents:_contents,\n          selected_content_id:this.max_content_id,\n          mode:\"read\",\n\n        });\n      }.bind(this)}></CreateContent>;\n    } else if(this.state.mode === 'update'){\n      _content = this.getReadContent();\n      _article = <UpdateContent data={_content}\n      onSubmit={function(_id, _title, _desc){\n        var _contents = Array.from(this.state.contents);\n        var i = 0;\n        while (i < _contents.length) {\n          if (_contents[i].id === _id){\n            _contents[i] = {id:_id, title:_title, desc:_desc};\n            break;\n          }\n          i = i + 1;\n        }\n        this.setState({\n          contents:_contents,\n          mode:\"read\"\n        });\n      }.bind(this)}></UpdateContent>;\n    }\n\n    return _article;\n  };\n  //props나 state가 바뀌면 render함수가 다시 호출된다. (render안에 있는 다른 모든 컴포넌트 클레스에서도 render함수가 모두 다시 호출된다.)\n  render(){\n\n    //여기서 this는 App 컴포넌트 클래스를 가르킨다.\n    return (\n      <div className=\"App\">\n        <Subject\n          title={this.state.subject.title}\n          sub={this.state.subject.sub}\n          onChangePage={function(){\n            this.setState({mode:'welcome'});\n          }.bind(this)}>\n        </Subject>\n        <TOC\n          data={this.state.contents}\n          onChangePage={function(id){\n            this.setState({mode:'read', selected_content_id:Number(id)});\n          }.bind(this)}>\n        </TOC>\n        <Control onChangeMode={function(_mode){\n          if(_mode === 'delete'){\n            if(window.confirm('are you sure?')){\n              var _contents = Array.from(this.state.contents);\n              var i = 0;\n              while (i < _contents.length){\n                if(_contents[i].id === this.state.selected_content_id){\n                  _contents.splice(i,1);\n                  break;\n                }\n                i = i + 1;\n              }\n              this.setState({mode:'welcome',contents:_contents});\n              alert(\"deleted!\");\n            }\n          } else {\n            this.setState({mode:_mode});\n          }\n        }.bind(this)}></Control>\n        {this.getContent()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}